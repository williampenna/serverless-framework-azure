service: serverless-event-hub

frameworkVersion: '2'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: azure
  region: East US 2
  runtime: nodejs12
  os: windows
  resourceGroup: test-event-hub

  # you can define apim configuration here
  apim:
    apis:
      - name: photos-api
        subscriptionRequired: false # if true must provide an api key
        displayName: Photos API
        description: Photos sample app APIs
        protocols:
          - https
        path: api
        authorization: none
    backends:
      - name: photos-backend
        url: api
    cors:
      allowCredentials: false
      allowedOrigins:
        - "*"
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
      allowedHeaders:
        - "*"
      exposeHeaders:
        - "*"

plugins: # look for additional plugins in the community plugins repo: https://github.com/serverless/plugins
  - serverless-azure-functions
  - serverless-webpack

functions:
  hello:
    handler: src/handlers/hello.sayHello
    events:
      - http: true
        methods:
          - GET
        authLevel: anonymous # can also be `function` or `admin`

  assignedPhoto:
    handler: src/handlers/photo.assigned
    events:
      - http: true
        methods:
          - GET
        authLevel: anonymous
    apim:
      api: photos-api
      backend: photos-backend
      operations:
        - method: get
          urlTemplate: /assignedPhoto
          displayName: GetPhotos

  goodbye:
    handler: src/handlers/goodbye.sayGoodbye
    events:
      - eventHub: true
        x-azure-settings:
          name: eventHubMessages #<string>, default - "myEventHubMessage", specifies which name is available on `context.bindings`
          eventHubName: goodbye #<string>, specifies the Name of the Event Hub
          consumerGroup: $Default #<string>, default - "$Default", specifies the consumerGroup to listen with
          connection: testWillEHN_RootManageSharedAccessKey_EVENTHUB #<string>, App Setting/environment variable which contains Event Hubs Namespace Connection String
  # The following are a few examples of other events you can configure:
  # storageBlob:
  #   handler: src/handlers/storageBlob.printMessage
  #   events:
  #     - blob:
  #       x-azure-settings:
  #         name: blob # Specifies which name is available on `context`
  #         path: blob-sample/{blobName}
  #         connection: AzureWebJobsStorage # App Setting/environment variable which contains Storage Account Connection String
  # storageQueue:
  #   handler: src/handlers/storageQueue.printMessage
  #   events:
  #     - queue: queue-sample
  #       x-azure-settings:
  #         name: message # Specifies which naem is available on `context`
  #         connection: AzureWebJobsStorage
  # timer:
  #   handler: src/handlers/timer.printMessage
  #   events:
  #     - timer:
  #       x-azure-settings:
  #         schedule: '*/10 * * * * *'
  # eventhub:
  #   handler: src/handlers/eventHub.printMessage
  #   events:
  #     - eventHub:
  #       x-azure-settings:
  #         name: eventHubMessages # Specifies which name it's available on `context`
  #         eventHubName: sample-hub # Specifies the Name of the Event Hub
  #         consumerGroup: $Default # Specifies the consumerGroup to listen with
  #         connection: EVENT_HUBS_CONNECTION # App Setting/environment variable which contains Event Hubs Namespace Connection String
  # serviceBusQueue:
  #   handler: src/handlers/serviceBusQueue.printMessage
  #   events:
  #     - serviceBus:
  #       x-azure-settings:
  #         name: message # Specifies which name is available on `context`
  #         queueName: sample-queue # Name of the service bus queue to consume
  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String
  # serviceBusTopic:
  #   handler: src/handlers/serviceBusTopic.printMessage
  #   events:
  #     - serviceBus:
  #       x-azure-settings:
  #         name: message # Specifies which name it's available on `context`
  #         topicName: sample-topic # Name of the service bus topic to consume
  #         subscriptionName: sample-subscription # Name of the topic subscription to retrieve from
  #         connection: SERVICE_BUS_CONNECTION # App Setting/environment variable variable which contains Service Bus Namespace Connection String
